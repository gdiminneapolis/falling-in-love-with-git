#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t reveal_title_slide:nil
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil toc:nil
#+REVEAL_THEME: moon
#+REVEAL_EXTRA_CSS: moon-extras.css
#+REVEAL_TRANS: none
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="GDI Class Falling in Love With Git 2.0">
#+REVEAL_POSTAMBLE: <div> Created by Tamara Temple &lt;tamara@tamouse.org&gt; </div>
#+REVEAL_PLUGINS: (markdown notes highlight)

* Welcome!

  Girl Develop It is here to provide affordable and accessible
  programs to women to learn software through mentorship and hands-on
  instruction.

  /Some Rules:/

  - We are here for you!
  - Every question is important
  - Help each other
  - Have fun

** Introductions

   - Who are you?
   - What do you do, or what do you want to do?
   - What's your experience with GDI?
   - What's your experience with Git and GitHub?

** Goals for Today's Course

   #+ATTR_REVEAL: :frag (roll-in)
   - Learn what version control is
   - Get you set up to use Git
   - Basics of Git
   - "Gitting" social with Github

* What is Version Control?

  Version control allows you and your team to do /two/ very powerful
  things:

  #+ATTR_REVEAL: :frag (roll-in)
 - *Collaborate*

 - *Track and Revert Changes*

** Collaborate

   You can create /anything/ with other people and be able to easily
   merge changes with each other

   #+ATTR_REVEAL: :frag (roll-in)
   - software
   - documentation
   - academic papers
   - books, articles, blogs
   - websites

** Track and Revert Changes

   Git gives you the ability to "go back in time"

   #+ATTR_REVEAL: :frag (roll-in)
   - see who made changes, when
   - track down bugs
   - see the history of the project
** Not Convinced Yet?

   #+ATTR_REVEAL: :frag (roll-in)
   - Employers *want* this
   - It's a required skill
   - It's a standard expectation to work in groups
     - public, i.e. opensource
     - private
   - It's personally useful

* Types of Version Control

  /There are basically two types:/

  #+ATTR_REVEAL: :frag (roll-in)

  - *Centralized:*
    - e.g. CVS, Subversion, Perforce

  - *Decentralized:*
    - e.g. Git, Mercurial (Hg)

** Centralized Version Control

   #+ATTR_REVEAL: :frag (roll-in)
   - One central source

   - Collaborators check files out

   - Work is done locally

   - Others are prevented from working on checked out files

   - Collaborators check files back in when done

** Decentralized Version Control

   #+ATTR_REVEAL: :frag (roll-in)
   - Local source, shared remote

   - Collaborators clone remote (fork, mirror)

   - Work is done locally

   - Others can work on same files

   - Changes are pushed to remote

   - Tools for merging conflicts
* Intro to Git

  #+ATTR_REVEAL: :frag (roll-in)
 - *Fast and easy setup:* You can get a whole team and / or project up
   and running quickly

 - *Distributed:* everyone has their own full repository of the
   project, changes are shared through a central Depot (remote,
   origin) repository

 - *Hashed commits:* commits have unique ID ~string~ to keep track of
   when changes are made and by whom
* Working with Git
** Creating repositories
** Staging changes
** Committing changes
** Pushing changes
** Branching and Merging
* Installation

  Most systems come with some version of Git installed, but it's
  usually best to work with the most recent (or close to recent)
  version.

  Git itself is primarily a command line tool

  There are also two good GUI tools that you can do most of what
  you'll learn today.

  - SourceTree
  - Github Desktop

  We'll be looking at SourceTree today

** Install Git

   #+BEGIN_EXPORT html
   <div>
     <a href="http://git-scm.com/downloads"
        alt="Download latest version of Git"
        target="_blank" rel="noopener noreferrer">
       <img src="images/install-git.png" alt="Download latest version of Git">
     </a>
   </div>
   #+END_EXPORT


   #+BEGIN_EXPORT html
   <div>
     <a href="http://git-scm.com/downloads"
        alt="Download latest version of Git"
        target="_blank" rel="noopener noreferrer">
       git-scm.com/downloads
     </a>
   </div>
   #+END_EXPORT

   #+BEGIN_EXPORT html
   <a href="command_line.html" title="Command line class slides"
      target="_blank" rel="noopener noreferrer"
   >Class slides using command line</a>
   #+END_EXPORT

** Install SourceTree

   - An alternative to /most/ of the command line git tools

   - Download from:

     #+BEGIN_EXPORT html
     <a href="https://www.atlassian.com/software/sourcetree"
        title="Atlassian SourceTree Software"
        target="_blank" rel="noopener noreferrer"
        >https://www.atlassian.com/software/sourcetree</a>
     #+END_EXPORT

     #+BEGIN_EXPORT html
     <a href="sourcetree.html" title="Class slides with Sourcetree examples"
        target="_blank" rel="noopener noreferrer">Class slides using SourceTree</a>
     #+END_EXPORT

** GitHub Desktop - a GUI Git client

   - Another alternative to /most/ of the command line git tools

   - Download from:

     https://desktop.github.com/


   /(We won't be covering this tool in class.)/

* Working in Teams
** Making Pull Requests
** Reviewing Pull Requests
** Merging Pull Requsts
* Practical Git
** The project
** Form up in to teams
** Choose Roles
** Work Flow
