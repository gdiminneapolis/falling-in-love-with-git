#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t reveal_title_slide:nil
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil toc:nil
#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.5.0/
#+REVEAL_THEME: moon
#+REVEAL_EXTRA_CSS: moon-extras.css
#+REVEAL_TRANS: none
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="GDI Class Falling in Love With Git 2.0">
#+REVEAL_POSTAMBLE: <div> Created by Tamara Temple &lt;tamara@tamouse.org&gt; </div>
#+REVEAL_PLUGINS: (markdown notes highlight)
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link rel="stylesheet" href="non-reveal.css">

* SourceTree
  In this section, we'll be working with SourceTree, a GUI desktop
  application that handles version control.

* Download

  Go to https://www.sourcetreeapp.com/ and download the version for
  your OS (Mac or Win)

* Installation

  Run the installer

*** Install steps

    - Sign up with Atlassian
    - Register your copy
    - Skip step that connects to BitBucket or Github
    - After installation, start up SourceTree

* Configure
** Set Preferences

   From the *SourceTree* menu:

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/preferences.png" class="img-responsive"
        alt="Open SourceTree Preferences" />
   #+END_EXPORT

*** set user info

    Make sure your user information is correct:

    #+BEGIN_EXPORT html
      <img src="images/sourcetree/set-user-info.png"
           class="img-responsive" alt="Set your user info" />
    #+END_EXPORT

*** set global ignore file

    Set up the global gitignore file.

    #+BEGIN_EXPORT html
      <img src="images/sourcetree/set-global-gitignore.png"
           alt="Set the global gitignore file" />
    #+END_EXPORT

    You can edit it from here as well.

*** set branch push policy to matching

    Set push branches to "matching":

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/push-branches-matching.png"
         alt="Set push branches to matching" />
    #+END_EXPORT

** Connect to Github

   Let's go ahead and connect up to your GitHub account.

   #+REVEAL: split

   Under the Account tab, click on "Add"

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/github/01-add-github-account.png"  class="img-responsive" />
   #+END_EXPORT

   #+REVEAL: split

   Then select "GitHub", "OAuth", and click on "Connect"

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/github/02-connecting-to-github.png"  class="img-responsive"/>
   #+END_EXPORT

   #+REVEAL: split

   Log in to GitHub with your account

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/github/03-log-in-to-github.png"  class="img-responsive"/>
   #+END_EXPORT

   #+REVEAL: split

   After logging in, click on "Generate"

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/github/04-generate-the-key.png"  class="img-responsive"/>
   #+END_EXPORT

   #+REVEAL: split

   Have SourceTree generate the key pair.

   You can leave the Pass phrase fields empty.

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/github/05-create-the-key.png"  class="img-responsive"/>
   #+END_EXPORT

   #+REVEAL: split

   Click on "OK" to enable the connection to GitHub

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/github/06-enable-account.png"  class="img-responsive"/>
   #+END_EXPORT

   #+REVEAL: split

   You are now connected to your GitHub account

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/github/07-github-account-connected.png"  class="img-responsive"/>
   #+END_EXPORT
   #+REVEAL: split

   Verify that the SourceTree key is on Github.

   In the browser, go to your account, *Settings* -> *SSH and GPG
   Keys*

   Look for the SourceTree key

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/github/08-verify-key-on-github.com.png"  class="img-responsive"/>
   #+END_EXPORT

* Getting Familiar with SourceTree
** Repository Bookmarks

   The bookmarks window gives you quick access to all your
   repositories that are managed in SourceTree

   #+REVEAL: split

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/bookmarks-window.png" class="img-responsive" alt="" />
   #+END_EXPORT

*** Creating new items

    #+ATTR_REVEAL: :frag (fade-in)
    - You can create new bookmarks and bookmark groups.
    - You can create new local and remote repos.
    - You can add existing local or remote repos.

    #+REVEAL: split

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/bookmarks-new-button.png" class="img-responsive" alt="" />
    #+END_EXPORT


** Repository Window
   The repository window contains the controls and information for
   managing the repo.

   - Adding, commiting, and pushing changes
   - Creating, checking out, merging, and deleting branches

   #+REVEAL: split

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/repo-window.png" class="img-responsive" alt="" />
   #+END_EXPORT


*** Menubar

    The menubar at the top has the major operations

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/menubar.png">
    #+END_EXPORT

*** Sidebar
    Hover over the major items in the side bar to show or hide them

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/sidebar.png" style="max-height: 60vh;">
    #+END_EXPORT

*** Log

    The log area in the upper right quadrant shows the history of
    commits to the repo.

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/log-area.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Status

    The status area shows the current status of the files at the
    selected log entry.

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/status-area.png" class="img-responsive" alt="" />
    #+END_EXPORT

* Create a New Project, Local First

  You can create a new local project repo

  ... and create the remote at the same time

** Choose location

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/01-choose-location-for-bookmark.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Create the local repo

   #+BEGIN_EXPORT html
      <img src="images/sourcetree/new-repo-local-first/02-create-the-local-repo.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Tell it the location

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/03-tell-it-the-location.png" class="img-responsive" alt="" />
   #+END_EXPORT


** Create the remote

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/04-create-the-remote-repo.png" class="img-responsive" alt="" />
   #+END_EXPORT


** See the new repo on Github

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/05-new-repo-on-github.png" class="img-responsive" alt="" />
   #+END_EXPORT

** But it's still empty

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/06-but-its-still-empty.png" class="img-responsive" alt="" />
   #+END_EXPORT

* Let's Develop It!

  Objective: Create a new local project with SourceTree

  #+REVEAL_HTML: <small>

  1. From the bookmarks window: New -> Create Local Repository
  2. Provide it a path, i.e., the folder where your project will be
     created.
     - Use the "..." button to navigate to the place you want your project
     - Create a new folder that will be the name of your project
  3. The project name is automatically filled in.
  4. Make sure you're creating a Git repository.
  5. Make sure to check the "Also create remote repository" checkbox
  6. Click on create
  7. Create the remote
     - Fill in the description if you wish
     - Make sure the "private repository" checkbox is *not* checked

  #+REVEAL_HTML: </small>

* Creating a New Project, Remote First

  If you want to go the other way, you can start by creating the
  remote repo first.

** Create the Remote Repo

   #+REVEAL: split

   Start creating the remote repo

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-remote-first/01-click-new-repository.png" >
   #+END_EXPORT

   #+REVEAL: split

   Select "Create Remote"

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-remote-first/02-select-create-remote.png">
   #+END_EXPORT

   #+REVEAL: split

   Create the remote repo

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-remote-first/03-create-the-remote-repo.png">
   #+END_EXPORT

** Clone the remote to your local machine

   Click on remote to show your remote repos

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-remote-first/04-click-on-remote.png" class="img-responseive" />
   #+END_EXPORT

   #+REVEAL: split

   Use the search box to filter the repos

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-remote-first/05-search-for-repo.png" class="img-responsive" />
   #+END_EXPORT

   #+REVEAL: split

   Clone the repo

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-remote-first/06-clone-repo.png" class="img-responsive" />
   #+END_EXPORT

   #+REVEAL: split

   Set the location for the clone on your local machine

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-remote-first/07-set-location.png" class="img-responsive" />
   #+END_EXPORT

   #+REVEAL: split

   Click the "Clone" button

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-remote-first/08-click-clone.png" class="img-responsive" />
   #+END_EXPORT

   #+REVEAL: split

   Look at your new repo!

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-remote-first/09-new-repo.png" class="img-responsive">
   #+END_EXPORT

** but it's still empty...

* Let's Develop It!

  Objective: create a new project from the remote side

  #+REVEAL_HTML: <small>

  1. From the bookmarks window: New -> Create Remote Repository
  2. Git the repo a name and description.
  3. Make sure "private repository" is *not* checked.
  4. Create the remote.
  5. Click on "Remote".
  6. Search for your repo.
  7. Click on "Clone".
  8. Give the path to the new repo. (The last folder and the project
     name should match.)
  9. Click "Create"

  #+REVEAL_HTML: </small>

* Create some content

  Fire up your editor and create a ~README.md~ file:

  #+BEGIN_SRC markdown
    # Hello World!

    This is the README file for this repository.
    It doesn't matter for this class what you put here.
    It's going to look different in the rest of the slides.

  #+END_SRC

** Check on the status

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/07-created-some-new-content.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Add, commit, and push

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/08-add-commit-and-push.png" class="img-responsive" alt="" />
   #+END_EXPORT


** Output from commit message

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/09-output-from-initial-commit.png" class="img-responsive" alt="" />
   #+END_EXPORT

** See local branches

   At first, SourceTree hides the local branches, so tell it to show
   them

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/10-see-local-branches.png" class="img-responsive" alt="" />
   #+END_EXPORT

** See the remote branches, too

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/11-see-remote-branches.png" class="img-responsive" alt="" />
   #+END_EXPORT


** Finally, look over at Github

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-repo-local-first/12-back-on-github-first-commt.png" class="img-responsive" alt="" />
   #+END_EXPORT

* Let's Develop It!

  Objective: Put some content in our project and put it under version
  control

  #+REVEAL_HTML: <small>
  1. Open the project file in your editor.
  2. Create a README.md file, and put something in it.
  3. Save the file.
  4. Switch back to SourceTree.
  5. Stage the file.
  6. Commit and push the changes.
  #+REVEAL_HTML: </small>

* Tracking and Reverting Changes

  A great feature of Git is that it lets you erase any changes you've
  made in a step to get back to the original.

  #+REVEAL: split

  You can recover from changes made:

  #+ATTR_REVEAL: :frag (appear)
  - before you add the changes to staging
  - after adding but before committing the changes to the local repo
  - after committing to the local repo but before pushing to the
    remote
  - after pushing to the remote

** Before staging

   If you've made some changes to try something out but you decide to
   abandon them, SourceTree makes this easy

*** discard hunks

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/tracking-changes/discard-before-staging.jpg"
         class="img-responsive"
         alt="screenshot of sourcetree showing change status of README.md file" />
    #+END_EXPORT

** After staging, before committing

   After you've staged your changes, but before you commit them,
   SourceTree can also recover these.

   #+REVEAL: split

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/tracking-changes/revert-to-commt.jpg"
        class="img-responsive"
        alt="revert to commit" />
   #+END_EXPORT
** After committing, before pushing

   Make some changes, and let's commit them.

*** commit the changes

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/tracking-changes/commit-a-change.jpg"
         class="img-responsive" alt="committing a change" />
    #+END_EXPORT

*** select the commit to revert

    #+REVEAL_HTML: <img src="images/sourcetree/tracking-changes/revert-commit-select-commit.jpg" class="img-responsive" />

*** select "Reverse commit" from drop-down

    #+REVEAL_HTML: <img src="images/sourcetree/tracking-changes/revert-commit-select-revert-change.jpg" class="img-responsive" />

*** after the revert, a new commit

    #+REVEAL_HTML: <img src="images/sourcetree/tracking-changes/revert-commit-after-revert.jpg" class="img-responsive" />


** After pushing

   Even if you've pushed to the remote, you can fix things.

   #+ATTR_REVEAL: :frag (fade-in)
   However, since your teammates may have pulled your changes, you'll
   need to make a new commit and push those changes. (sorry)

   #+ATTR_REVEAL: :frag (fade-in)
   This is to prevent discrepancies between the indexes in the various
   repositories.

*** A better way

    Since you can't very easily erase changes in a remote (pushed)
    repository, the better way to develop projects is with branching
    and merging.

* Let's Develop It!

  Objective: Try out making and reverting changes.

  No directives here, just try out the various options shown prior.

* Multiple Development Paths

  Work on multiple versions at the same time with:

  #+ATTR_REVEAL: :frag (fade-in)
  - Branching
  - Merging


  #+REVEAL: split

  Creating a new branch to work on a feature or bug,

  #+BEGIN_EXPORT html
  <img src="images/gitcats/cat-feature-branch.small.jpg"
       class="img-responsive"
       alt=""/>
  #+END_EXPORT

  and then merge it back into the regular development branch


* Branching

  To make a new branch from an existing branch, click the "Branch"
  button:

  #+BEGIN_EXPORT html
  <img src="images/sourcetree/branch-button.png" class="img-responsive"
       alt="SourceTree branch button" />
  #+END_EXPORT

** Give the branch a name

   In the dialog, enter the new branch name:

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/new-branch-name.png" class="img-responsive"
        alt="Entering the new branch name" />
   #+END_EXPORT

   Leave the "Working copy parent" and "Checkout new branch" options selected.

** Create the new branch

   Press then "Create Branch" button.

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/01-create-new-branch.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Your new branch

   In SourceTree, the current working branch is highlighted.

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/02-new-branch-highlighted.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Make some changes

   After you make some changes, SourcTree reports uncommitted changes

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/03-uncommited-changes.png" class="img-responsive" alt="" />
   #+END_EXPORT

** See the pending changes

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/04-pending-changes.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Stage the changes

   Select the checkbox next to the changes you want to stage (or all)

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/05-stage-changes.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Commit the changes

   Click on "Commit" to start the commit proess

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/06-commit-changes.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Review, comment, and commit

   Review the changes, add a commit message, and commit.

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/07-commit-message.png" class="img-responsive" alt="" />
   #+END_EXPORT

   Check the "Push" checkbox to also peform the push to the remote

** Output from push

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/08-push-output.png" class="img-responsive" alt="" />
   #+END_EXPORT

** After the commit and push

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/09-after-commit-and-push.png" class="img-responsive" alt="" />
   #+END_EXPORT


* Let's Develop It

  Objective: Create a branch and push changes to it

  #+REVEAL_HTML: <small>
  1. Create a new branch.
  2. Create a new file in the branch with some content.
  3. Check the status in SourceTree.
  4. Stage, commit, and push the changes in the branch.
  #+REVEAL_HTML: </small>

* Merging
  #+REVEAL_HTML: <img src="images/gitcats/merging-cats.jpg" class="img-responsive" alt="" />

  #+REVEAL: split
  - When you're finished working in the development branch, you'll
    want  to merge those changes with the master branch.

  #+ATTR_REVEAL: :frag (fade-in)
  - Since the master branch may have also been updated, you need to
    first pull changes to master and merge with your development
    branch.
  - Resolve any conflicts that may arise.
  - Finally, Merge your development branch with master.

** Merging with no conflicts

*** A new branch with a file

    #+REVEAL_HTML: <img src="images/sourcetree/tracking-changes/new-file-in-new-branch.jpg" class="img-responsive" alt="new file in new branch" />

*** Checkout master

    #+REVEAL_HTML: <img src="images/sourcetree/tracking-changes/checked-out-master.jpg" class="img-responsive" alt="checked out master" />

*** Merge

    #+REVEAL_HTML: <img src="images/sourcetree/tracking-changes/click-merge-button-on-toolbar.jpg" class="img-responsive" alt="Press the merge button on the toolbar" />

*** Merge Dialog

    #+REVEAL_HTML: <img src="images/sourcetree/tracking-changes/merge-select-branch-to-merge.jpg" class="img-responsive" alt="select the branch to merge" />

* Let's create a conflict
** Set up a conflict with master

   Edit the ~README.md~ file

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/10-changing-the-readme-in-new-branch.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Commit the update, but don't push

   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/11-commit-update-but-dont-push.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Set up a conflict to resolve

*** Checkout master

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/12-checkout-master.png" class="img-responsive" alt="" />
    #+END_EXPORT

    Edit the ~README.md~ file in master

*** See the uncommitted changes

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/13-uncommited-changes-in-master-branch.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Commit and push changes in master

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/14-commit-and-push-changes-on-master.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Check out the new branch again

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/15-checkout-new-branch-again.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** CONFLICT SET UP!

    The ~README.md~ file is changed in both the master and new
    branches

    - these changes cannot be resolved automatically

*** Now back to the regularly scheduled program

** Updating new branch with changes from master

*** Merge master into the new branch

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/16-merge-master-into-new-branch.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Confirm the merge

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/17-confirm-merge.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Merge result output

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/18-merge-result-output.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Merge conflict warning

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/19-merge-conflict-warning.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Merge conflicts visible in repo status

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/20-merge-conflicts-in-repo.png" class="img-responsive" alt="" />
    #+END_EXPORT

* Merging when there are conflicts
** Resolving Merge Conflicts

*** Prepare to resolve conflict

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/21-prepare-to-resolve-conflicts.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Launch merge tool
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/22-launch-merge-tool.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Merge choices
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/23-merge-choices.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Fix changes in editor
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/24-see-changes-in-editor.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Edit the file to resolve changes
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/25-edit-the-file-to-resolve-conflicts.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Mark the file resolved
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/25-mark-resolved.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Complete the merge
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/26-complete-merge.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Commit to complete the merge
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/27-complete-merge-commit.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Push all the commits
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/28-push-all-commits.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Push dialog
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/29-push-dialog.png" class="img-responsive" alt="" />
    #+END_EXPORT

** Merge the new branch into master

*** Over on GitHub...

    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/30-how-things-look-on-github.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Create a Pull Request
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/31-create-a-pr-on-github.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** PR Dialog
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/32-pull-request-dialog.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** PR View
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/33-pull-request.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** PR Files Diff
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/34-pull-request-files-diff.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Merge PR Button
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/35-click-button-to-merge.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Complete the merge
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/36-complete-merge-of-pull-request.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Success!
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/37-successful-merge.png" class="img-responsive" alt="" />
    #+END_EXPORT

** Updating the Local Master

*** Checkout local master
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/38-checkout-local-master.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Pull changes from remote
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/39-pull-remote-changes.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Pull dialog
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/40-pull-dialog.png" class="img-responsive" alt="" />
    #+END_EXPORT

*** Pull output
    #+BEGIN_EXPORT html
    <img src="images/sourcetree/branching-and-merging/41-pull-output.png" class="img-responsive" alt="" />
    #+END_EXPORT


* Let's Develop It!

  Objective: Set up a conflict between the master and new branch

  #+REVEAL_HTML: <small>
  1. In the same branch, edit the README file in an obvious way.
  2. Save the file, stage and commit, but *do not push* the changes.
  3. Checkout the master branch.
  4. Edit the README file in another obvious way.
  5. Save the file, stage, commit, *and push* the changes to the
     remote.
  #+REVEAL_HTML: </small>

* Let's Develop It!

  Objective: Merge master into the new branch and resolve conflicts

  #+REVEAL_HTML: <small>
  1. Checkout the new branch.
  2. Merge master into the new branch to catch up changes.
  3. Resolve the conflict in README.
  4. Complete the merge.
  5. Push the changes to the remote.
  #+REVEAL_HTML: </small>

* Let's Develop It!

  Objective: Use Github to prepare a Pull Request and complete it

  #+REVEAL_HTML: <small>
  1. On Github, create a Pull Request for your new branch to merge
     with master.
  2. Merge the Pull Request.
  #+REVEAL_HTML: </small>

* Let's Develop It!

  Objective: update the local master with changes from the remote

  #+REVEAL_HTML: <small>
  1. In SourceTree, check out your master branch.
  2. Pull the latest updates from the remote.
  #+REVEAL_HTML: </small>

* Cleaning up

** Delete the old "new" branch

   The "new" branch is now fully merged, so it can be deleted
   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/42-delete-branch.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Delete branch dialog
   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/43-delete-branch-dialog.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Delete branch output
   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/44-delete-branch-output.png" class="img-responsive" alt="" />
   #+END_EXPORT

** Status after delete
   #+BEGIN_EXPORT html
   <img src="images/sourcetree/branching-and-merging/45-after-delete-branch.png" class="img-responsive" alt="" />
   #+END_EXPORT


* Let's Develop It!

  Objective: Clean up from closing the branch

  #+REVEAL_HTML: <small>
  1. In SourceTree, view the local branches
  2. Select the new branch that was just merged
  3. Right-click, and select Delete...
  4. Check the "Delete remote" checkbox
  5. Click "OK" to start the operation
  #+REVEAL_HTML: </small>

* Next section:

  *Working in Teams and Practical Git*

  [[./working-in-teams.html][Jump to the next section]]
